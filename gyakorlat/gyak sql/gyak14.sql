/*1. Hozzuk létre a gyerek táblát az alábbi utasítással!*/

DROP TABLE gyerek PURGE;

CREATE TABLE gyerek
(ID NUMBER(4) GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY
,nev VARCHAR2(32) NOT NULL
,nem VARCHAR2(1) CHECK (nem IN ('F','L'))
,iskolas NUMBER(1) DEFAULT 1 CHECK (iskolas IN(0,1))
,kor NUMBER(2)
,felvitte VARCHAR2(16) DEFAULT USER NOT NULL
,felvitel DATE DEFAULT SYSDATE NOT NULL
);
DESC gyerek

/*2. Paraméteres utasítással vigyünk be 2 fiút és 2 lányt a táblába, csak
a nevet és a nemet adjuk meg, a többi alapértelmezett.*/

INSERT INTO gyerek(nev,nem, kor) VALUES(
:a_nev,:b_nemFL, :c_kor
);

COMMIT;

ALTER SESSION SET NLS_DATE_FORMAT='mm.dd hh24:mi:ss';

SELECT * FROM gyerek;

/*3. Hozzunk létre egy bevitel nevû nézetet, amelyen keresztül majd más
is tud adatot bevinni a táblánkba. A felvitte és a felvitel adatok mindenképpen
csak alapértelmezettek lehessenek!*/

CREATE OR REPLACE VIEW bevitel
AS SELECT  nev, nem, iskolas, kor
FROM gyerek;

/*4. Vigyünk be további 2 rekordot a nézeten keresztül!*/

INSERT INTO bevitel VALUES(
:a_nev,:b_nemfl,:c_iskolas10,:d_kor
);

COMMIT;
SELECT * FROM bevitel;
SELECT * FROM gyerek;

/*5. Készítsünk bevitel2 néven különbözõ nézeteket és próbáljuk ki
rajtuk keresztül az adatbevitelt illetve más DML utasításokat!*/

--csak a névbõl
CREATE OR REPLACE VIEW bevitel2
AS SELECT  nev
FROM gyerek;

INSERT INTO bevitel2
VALUES('Szabolcs');

SELECT * FROM bevitel2;
SELECT * FROM gyerek;

COMMIT;

--csak a nembõl
CREATE OR REPLACE VIEW bevitel2
AS SELECT  nem
FROM gyerek;

INSERT INTO bevitel2
VALUES('L');

SELECT * FROM bevitel2;
SELECT * FROM gyerek;

--csak a nevbõl és a nembõl
CREATE OR REPLACE VIEW bevitel2
AS SELECT nev, nem
FROM gyerek;

SELECT * FROM bevitel2;

DELETE FROM bevitel2
WHERE nem IS NULL;

SELECT * FROM bevitel2;
SELECT * FROM gyerek;

COMMIT;

--legyen számított kifejezés a nézetben
CREATE OR REPLACE VIEW bevitel2
AS SELECT  nev, kor+1 kor_jovore
FROM gyerek;

SELECT * FROM bevitel2;

INSERT INTO bevitel2 VALUES('Ottó',12);

INSERT INTO bevitel2(nev) VALUES('Ottó');

SELECT * FROM bevitel2;
SELECT * FROM gyerek;

COMMIT;

/*6. Készítsünk olyan nézetet, amelybe biztosan nem lehet adatot bevinni!*/

CREATE OR REPLACE VIEW bevitel2
AS SELECT nev, nem
FROM gyerek
WITH READ ONLY;

INSERT INTO bevitel2 VALUES ('Anna','L');

/*7. Készítsünk olyan nézetet, amelyben csak a lányok szerepelnek! Ezután
próbáljunk fiút bevinni a nézeten keresztül!*/

CREATE OR REPLACE VIEW lany AS SELECT nev, nem FROM gyerek
WHERE nem='L';

SELECT * FROM lany;

INSERT INTO lany
VALUES ('Pisti', 'F');

COMMIT;
SELECT * FROM lany;
SELECT * FROM gyerek;

CREATE OR REPLACE VIEW lany AS SELECT nev, nem FROM gyerek
WHERE nem='L' WITH CHECK OPTION;

INSERT INTO lany
VALUES ('Pisti', 'F');

/*Egymás tábláinak használata. Kövessük az oktató utasításait, mert fontos a szinkron!*/

/*8. Kérdezzük le a szomszédunk gyerek táblájának és bevitel nézetének tartalmát!
Ehhez szükségünk lesz az õ sémanevére! Az alulvonások helyére mindig a társunk
sémanevét írjuk be! Miért tudjuk lekérdezni?*/

SELECT USER FROM dual;

SELECT * FROM ___.gyerek;
SELECT * FROM ___.bevitel;


/*9. Vigyünk be a szomszédunk gyerek táblájába a bevitel nézeten keresztül
egy gyereket!*/

INSERT INTO ___.bevitel(nev,nem)
VALUES ('Kitti','L');

COMMIT;

/*10. Adjunk jogosultságot a szomszédunknak a saját táblánkra adatbevitelre és
módosításra!*/

GRANT INSERT, UPDATE ON bevitel TO ___;

/*11. Szúrjunk be egy új rekordot a szomszéd táblájába! 
(Ismételjük meg a 9. feladatot!)*/

INSERT INTO ___.bevitel(nev,nem)
VALUES ('Kitti','L');
COMMIT;

/*12. Szúrjuk be a saját bevitel nézetünk adatait a szomszéd bevitel nézetébe!
Ne véglegesítsük!
Kérdezzük le a szomszéd gyerek tábláját és a sajátunkat is! Ismételjük meg
a két lekérdezést azután is, hogy mindketten kiadtuk a commit parancsot!*/

INSERT INTO ___.bevitel
SELECT * FROM bevitel;


SELECT * FROM ___.gyerek
ORDER BY ID;
SELECT * FROM gyerek
ORDER BY ID;

COMMIT;

/*13. Módosítsunk a saját táblánkban minden fiút, hogy ne legyen iskolás! 
NE COMMITTÁLJUNK! Módosítsuk a szomszédunk nézetében a Pisti nevû fiúkat úgy,
hogy iskolások legyenek!*/

UPDATE bevitel
SET iskolas=0
WHERE nem='F';

UPDATE ___.bevitel
SET iskolas=1
WHERE nev='Pisti';

/*Módosítások a csoport sémájában. Az alulvonások helyére mindig
a saját sémájuk nevét írják be, pl. G01_SZALLASHELY*/
/*A feladatokhoz használható sémák:
G01_SZALLASHELY
G12_SZALLASHELY
G02_SZALLASHELY
G11_SZALLASHELY
G03_SZALLASHELY
G04_EGYETEM
G06_EGYETEM
G08_EGYETEM
G13_EGYETEM
G05_WEBSHOP
G07_WEBSHOP
G14_WEBSHOP
G09_WEBSHOP
G10_WEBSHOP
*/

/*14. Vigyük be a saját bevitel nézetünk tartalmát a csoport sémánk
bevitel nézetébe és commitáljunk!*/
INSERT INTO ___.bevitel
SELECT * FROM bevitel;

COMMIT;

SELECT * FROM ___.gyerek;

/*15. Módosítsa mindenki a csoport sémánk bevitel nézetén keresztül
a Pisti nevû gyerekek adatait, hogy biztosan iskolásak legyenek!*/

UPDATE ___.bevitel
SET iskolas=1
WHERE nev='Pisti';
COMMIT;

/********************/
/*Gyakroló feladatok*/
/********************/