/*1. Dobjuk el az össze objektumunkat!*/

SELECT 
'drop '|| object_type ||' '
||object_name
||CASE WHEN lower(object_type)='table' THEN ' purge;' ELSE ';' END lefuttatni
FROM user_objects
WHERE lower(GENERATED)='n' and object_type<>'INDEX'
ORDER BY created DESC;
--A futtatással keletkezett utasításokat ide kell másolni és azokat is lefuttatni.
--Ha rossz a sorrend, akkor elõfordulhat, hogy le kell futtatni többször.

/*2. Hozzuk létre egy kereskedelmi adatbázis tábláit és töltsük fel adatokkal!*/
CREATE TABLE ugyfel(
 login VARCHAR2(20) CONSTRAINT pk_ugyfel_login PRIMARY KEY
,email VARCHAR2(50) CONSTRAINT nn_ugyfel_email NOT NULL 
  CONSTRAINT u_ugyfel_email UNIQUE 
  CONSTRAINT con_ugyfel_email CHECK (email LIKE '%@%.__' OR  email LIKE '%@%.___')
,vnev VARCHAR2(50) CONSTRAINT nn_ugyfel_vnev NOT NULL
,knev VARCHAR2(50) CONSTRAINT nn_ugyfel_knev NOT NULL
,szulev NUMBER(4)
,cim VARCHAR2(100)
);

INSERT INTO ugyfel SELECT * FROM minta.ugyfel;
COMMIT;

CREATE TABLE termek(
 termekkod VARCHAR2(12) CONSTRAINT pk_termek_termekkod PRIMARY KEY
,megnevezes VARCHAR2(100) CONSTRAINT nn_termek_megnevezes NOT NULL
,listaar NUMBER(10,2) CONSTRAINT con_termek_liataar CHECK (listaar>=0)
,kategoria VARCHAR2(20) CONSTRAINT nn_termek_kategoria NOT NULL 
,leiras CLOB
,raktar VARCHAR2(1)
,keszlet NUMBER(5) CONSTRAINT con_termek_keszlet CHECK (keszlet>=0)
,mennyisegi_egys VARCHAR2(8)
,felvitte VARCHAR2(10) DEFAULT USER CONSTRAINT nn_termek_felvitte NOT NULL
,felvitel_datum DATE DEFAULT SYSDATE CONSTRAINT nn_termek_felviteldatum NOT NULL
);

INSERT INTO termek SELECT * FROM minta.termek;
COMMIT;

CREATE TABLE rendeles(
 rendelessorszam NUMBER(6) GENERATED BY DEFAULT  AS IDENTITY (START WITH 28086)
 CONSTRAINT pk_rendeles_rendelessorszam PRIMARY KEY
,login VARCHAR2(20) CONSTRAINT fk_rendeles_login REFERENCES ugyfel(login)
,rendelesi_ido DATE DEFAULT SYSDATE CONSTRAINT nn_rendeles_rendelesiido NOT NULL
,szallitasi_datum DATE
,szallitasi_mod VARCHAR2(20) CONSTRAINT con_rendeles_szallitasimod CHECK (szallitasi_mod IN('Posta','GLS','Személyes átvétel'))
,CONSTRAINT u_rendeles_login_rendelesiido UNIQUE (login,rendelesi_ido)
,CONSTRAINT con_rendeles_datumok CHECK (szallitasi_datum>=rendelesi_ido)
);

INSERT INTO rendeles
SELECT * FROM minta.rendeles;
COMMIT;

CREATE TABLE rendelesi_tetel(
 rendeles NUMBER(6) CONSTRAINT fk_rendtetel_rendeles REFERENCES rendeles(rendelessorszam)
,termekkod VARCHAR2(12) CONSTRAINT fk_rendtetel_termekkod REFERENCES termek(termekkod)
,egysegar NUMBER(10,2) CONSTRAINT nn_rendtetel_egysegar NOT NULL
,mennyiseg NUMBER(5)
 CONSTRAINT nn_rendtetel_mennyiseg NOT NULL
 CONSTRAINT con_rendtetel_mennyiseg CHECK (mennyiseg>0)
,CONSTRAINT pk_rendtetel_rendeles_termek PRIMARY KEY (rendeles,termekkod)
);

INSERT INTO rendelesi_tetel
SELECT * FROM minta.rendelesi_tetel;
COMMIT;

/*3. Kérdezzük le az indexeink adatait a katlógustáblákból!*/

SELECT * FROM dict
WHERE table_name LIKE 'USER_IND%';

SELECT * FROM user_indexes
ORDER BY table_name;
SELECT * FROM user_ind_columns
ORDER BY table_name, column_position;
SELECT * FROM user_ind_expressions
ORDER BY table_name;
SELECT * FROM user_ind_statistics
ORDER BY table_name, index_name;

/*4.	Készíttessünk a rendszerrel statisztikát! A Connections ablakban
minden táblánk gyorsmenüjében Statistics/Gather statistics,
majd futassuk le a 3. feladat lekérdezéseit újra!*/

/*5. Kapcsoljuk be a nyomkövetést és kérdezzük le az 
ugyfel táblából az azonosítót, a vezeték és keresztneveket! 
Ismételjük meg a lekérdezést különbözõ szûrõfeltételekkel, 
és vizsgáljuk meg az Execution plan információit!*/

set autotrace on
select login,vnev,knev from ugyfel;

/*a.	csak a Krisztina keresztnevûeket*/

select login,vnev,knev from ugyfel
where knev='Krisztina';

/*b.	csak a krisztina login-hoz tartozót*/

select login,vnev,knev from ugyfel
where login = 'krisztina';

/*c.	csak azokat, amelyeknek a loginja krisztina 
karaktersorral kezdõdnek*/

select login,vnev,knev from ugyfel
where login like 'krisztina%';

/*d.	csak azokat, melyek loginjában szerepel 
a krisz karaktersor*/

select login,vnev,knev from ugyfel
where login like '%krisz%';

/*6.	Kérdezzük le a rendeles táblából a rendelés 
sorszámát, idejét (másodperce pontosan) és az ügyfél 
azonosítóját (login)! Ismételjük meg a lekérdezést 
különbözõ szûrõfeltételekkel, és vizsgáljuk meg az 
Execution plan információit!*/

desc rendeles
select rendelessorszam, 
to_char(rendelesi_ido,'yyyy.mm.dd hh24:mi:ss') rendelesi_ido, 
login ugyfel_azonosito
from rendeles;

/*a.	csak a 100-as sorszámút*/

select rendelessorszam, to_char(rendelesi_ido,'yyyy.mm.dd hh24:mi:ss') rendelesi_ido, login ugyfel_azonosito
from rendeles
where rendelessorszam=100;

/*b.	csak a 100-nál kisebb sorszámúakat*/

select rendelessorszam, to_char(rendelesi_ido,'yyyy.mm.dd hh24:mi:ss') rendelesi_ido, login ugyfel_azonosito
from rendeles
where rendelessorszam<100;

/*c.	csak az 5000-nél kisebb sorszámúakat*/

select rendelessorszam, to_char(rendelesi_ido,'yyyy.mm.dd hh24:mi:ss') rendelesi_ido, login ugyfel_azonosito
from rendeles
where rendelessorszam<5000;

/*d.	csak a 6000-nél kisebb sorszámúakat*/

select rendelessorszam, to_char(rendelesi_ido,'yyyy.mm.dd hh24:mi:ss') rendelesi_ido, login ugyfel_azonosito
from rendeles
where rendelessorszam<6000;

/*e. csak a megadott másodpercben leadott rendelést*/

select rendelessorszam, to_char(rendelesi_ido,'yyyy.mm.dd hh24:mi:ss') rendelesi_ido, login ugyfel_azonosito
from rendeles
where rendelesi_ido=to_date('2015.05.03 14:23:58','yyyy.mm.dd hh24:mi:ss');

/*f. csak az INSTVANV loginú vásárló rendeléseit*/

select rendelessorszam, 
to_char(rendelesi_ido,'yyyy.mm.dd hh24:mi:ss') rendelesi_ido, 
login ugyfel_azonosito
from rendeles
where login='ISTVANV';

/*g. Ha gyakran kérdezünk le renedelési idõ alapján, login nélkül, akkor 
érdemes lehet a rendelési idõre külön is indexet készíteni. Vigyázat, 
ez már nem lesz unique! Hozzuk létre explicit módon és kérdezzünk le 
újra egy pontos idõpontot és egy nap rendeléseit is.*/

create index ind_rendido on rendeles(rendelesi_ido);

select rendelessorszam, 
to_char(rendelesi_ido,'yyyy.mm.dd hh24:mi:ss') rendelesi_ido, 
login ugyfel_azonosito
from rendeles
where rendelesi_ido=to_date('2015.05.03 14:23:58','yyyy.mm.dd hh24:mi:ss');

select rendelessorszam, 
to_char(rendelesi_ido,'yyyy.mm.dd hh24:mi:ss') rendelesi_ido, 
login ugyfel_azonosito
from rendeles
where trunc(rendelesi_ido)=to_date('2015.05.03','yyyy.mm.dd');

/*h. Dobjuk el az elõbb létrehozott indexet és hozzunk helyette létre 
explicit módon egy függvény alapú indexet a rendelési idõre
az idõadatok nélkül. Természetesen ez sem unique, majd ismételjük meg az utolsó
két lekérdezést!*/

drop index ind_rendido;
create index ind_rendnap on rendeles(trunc(rendelesi_ido));

select rendelessorszam, 
to_char(rendelesi_ido,'yyyy.mm.dd hh24:mi:ss') rendelesi_ido, 
login ugyfel_azonosito
from rendeles
where rendelesi_ido=to_date('2015.05.03 14:23:58','yyyy.mm.dd hh24:mi:ss');

select rendelessorszam, 
to_char(rendelesi_ido,'yyyy.mm.dd hh24:mi:ss') rendelesi_ido, 
login ugyfel_azonosito
from rendeles
where trunc(rendelesi_ido)=to_date('2015.05.03','yyyy.mm.dd');

/*7. Hozzuk újra létre az eldobott indexet is 
és kérdezzük le újra az indexeink tulajdonságait!
Majd a felelslegesnek tûnõ indexet dobjuk el újra!*/

create index ind_rendido on rendeles(rendelesi_ido);
select * from user_indexes
order by table_name, index_name;
drop index ind_rendido;

/*8. Kérdezzük le a termékeink azonosítóját, nevét 
és a belõlük leadott rendeléseket. Ismételjük meg a lekérdezést
különbözõ szûrésekkel!*/

desc termek
desc rendelesi_tetel

select termekkod, megnevezes, rendeles, egysegar, mennyiseg
from termek join rendelesi_tetel using(termekkod);

/*a. csak a kabátok rendelése*/

select termekkod, megnevezes, rendeles, egysegar, mennyiseg
from termek join rendelesi_tetel using(termekkod)
where megnevezes like '%kabát%';

/*b. csak az F001-KB101 termékkódú termék rendelése*/
select termekkod, megnevezes, rendeles, egysegar, mennyiseg
from termek join rendelesi_tetel using(termekkod)
where termekkod = 'F001-KB101';

/*c. készítsünk indexet a rendelési_tétel táblában a termékkódra*/
create index ind_rendtetel_termekkod on rendelesi_tetel(termekkod);

select termekkod, megnevezes, rendeles, egysegar, mennyiseg
from termek join rendelesi_tetel using(termekkod)
where termekkod = 'F001-KB101';

/*d. cseréljük le az elõzõ indexet bitmap indexre! Nézzük is meg az összes indexünket.*/

drop index ind_rendtetel_termekkod;
create bitmap index ind_rendtetel_termekkod_bitmap on rendelesi_tetel(termekkod);

select termekkod, megnevezes, rendeles, egysegar, mennyiseg
from termek join rendelesi_tetel using(termekkod)
where termekkod = 'F001-KB101';

select * from user_indexes
order by table_name, index_name;

/*Önálló feladat*/

/*1. Kérdezzük le a 4 tábla joinjával, hogy a Krisztina nevû ügyfeleink 
mikor rendeltek olyan termékeket, melyek 
megnevezése férfi-vel kezdõdik, ha a rendelt mennyiség legalább 10 volt.*/

select login, vnev||' '||knev név, rendelesi_ido, termekkod,megnevezes, mennyiseg
from ugyfel join rendeles using(login)
join rendelesi_tetel on (rendelessorszam=rendeles)
join termek using(termekkod)
where megnevezes like 'férfi%'
and knev='Krisztina'
and mennyiseg>10;


/*2. Készítsünk olyan indexeket amelyek lecsökkentik a fenti 
lekérdezés költségét! Ha nincs elég tárhelyünk, akkor dobjunk el olyan
indexeket, amelyek ehhez a lekérdezéshez nem kellenek!*/

create index ind_ugyfel_knev on ugyfel(knev);
create bitmap index ind_rendeles_login_bitmap on rendeles(login);
create index ind_termek_megnev on termek(megnevezes);

/*3.	Ismételjük az elõzõ gyakorlatok gyakorló feladatait!*/